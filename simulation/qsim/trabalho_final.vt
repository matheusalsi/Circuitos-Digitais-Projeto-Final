// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2022 07:38:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    trabalho_final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module trabalho_final_vlg_sample_tst(
	CLK,
	Reset,
	Start_Stop,
	sampler_tx
);
input  CLK;
input  Reset;
input  Start_Stop;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Reset or Start_Stop)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module trabalho_final_vlg_check_tst (
	Mone,
	Mtwo,
	Sone,
	Stwo,
	sampler_rx
);
input [6:0] Mone;
input [6:0] Mtwo;
input [6:0] Sone;
input [6:0] Stwo;
input sampler_rx;

reg [6:0] Mone_expected;
reg [6:0] Mtwo_expected;
reg [6:0] Sone_expected;
reg [6:0] Stwo_expected;

reg [6:0] Mone_prev;
reg [6:0] Mtwo_prev;
reg [6:0] Sone_prev;
reg [6:0] Stwo_prev;

reg [6:0] Mone_expected_prev;
reg [6:0] Mtwo_expected_prev;
reg [6:0] Sone_expected_prev;
reg [6:0] Stwo_expected_prev;

reg [6:0] last_Mone_exp;
reg [6:0] last_Mtwo_exp;
reg [6:0] last_Sone_exp;
reg [6:0] last_Stwo_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Mone_prev = Mone;
	Mtwo_prev = Mtwo;
	Sone_prev = Sone;
	Stwo_prev = Stwo;
end

// update expected /o prevs

always @(trigger)
begin
	Mone_expected_prev = Mone_expected;
	Mtwo_expected_prev = Mtwo_expected;
	Sone_expected_prev = Sone_expected;
	Stwo_expected_prev = Stwo_expected;
end


// expected Mone[ 6 ]
initial
begin
	Mone_expected[6] = 1'bX;
end 
// expected Mone[ 5 ]
initial
begin
	Mone_expected[5] = 1'bX;
end 
// expected Mone[ 4 ]
initial
begin
	Mone_expected[4] = 1'bX;
end 
// expected Mone[ 3 ]
initial
begin
	Mone_expected[3] = 1'bX;
end 
// expected Mone[ 2 ]
initial
begin
	Mone_expected[2] = 1'bX;
end 
// expected Mone[ 1 ]
initial
begin
	Mone_expected[1] = 1'bX;
end 
// expected Mone[ 0 ]
initial
begin
	Mone_expected[0] = 1'bX;
end 
// expected Mtwo[ 6 ]
initial
begin
	Mtwo_expected[6] = 1'bX;
end 
// expected Mtwo[ 5 ]
initial
begin
	Mtwo_expected[5] = 1'bX;
end 
// expected Mtwo[ 4 ]
initial
begin
	Mtwo_expected[4] = 1'bX;
end 
// expected Mtwo[ 3 ]
initial
begin
	Mtwo_expected[3] = 1'bX;
end 
// expected Mtwo[ 2 ]
initial
begin
	Mtwo_expected[2] = 1'bX;
end 
// expected Mtwo[ 1 ]
initial
begin
	Mtwo_expected[1] = 1'bX;
end 
// expected Mtwo[ 0 ]
initial
begin
	Mtwo_expected[0] = 1'bX;
end 
// expected Sone[ 6 ]
initial
begin
	Sone_expected[6] = 1'bX;
end 
// expected Sone[ 5 ]
initial
begin
	Sone_expected[5] = 1'bX;
end 
// expected Sone[ 4 ]
initial
begin
	Sone_expected[4] = 1'bX;
end 
// expected Sone[ 3 ]
initial
begin
	Sone_expected[3] = 1'bX;
end 
// expected Sone[ 2 ]
initial
begin
	Sone_expected[2] = 1'bX;
end 
// expected Sone[ 1 ]
initial
begin
	Sone_expected[1] = 1'bX;
end 
// expected Sone[ 0 ]
initial
begin
	Sone_expected[0] = 1'bX;
end 
// expected Stwo[ 6 ]
initial
begin
	Stwo_expected[6] = 1'bX;
end 
// expected Stwo[ 5 ]
initial
begin
	Stwo_expected[5] = 1'bX;
end 
// expected Stwo[ 4 ]
initial
begin
	Stwo_expected[4] = 1'bX;
end 
// expected Stwo[ 3 ]
initial
begin
	Stwo_expected[3] = 1'bX;
end 
// expected Stwo[ 2 ]
initial
begin
	Stwo_expected[2] = 1'bX;
end 
// expected Stwo[ 1 ]
initial
begin
	Stwo_expected[1] = 1'bX;
end 
// expected Stwo[ 0 ]
initial
begin
	Stwo_expected[0] = 1'bX;
end 
// generate trigger
always @(Mone_expected or Mone or Mtwo_expected or Mtwo or Sone_expected or Sone or Stwo_expected or Stwo)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Mone = %b | expected Mtwo = %b | expected Sone = %b | expected Stwo = %b | ",Mone_expected_prev,Mtwo_expected_prev,Sone_expected_prev,Stwo_expected_prev);
	$display("| real Mone = %b | real Mtwo = %b | real Sone = %b | real Stwo = %b | ",Mone_prev,Mtwo_prev,Sone_prev,Stwo_prev);
`endif
	if (
		( Mone_expected_prev[0] !== 1'bx ) && ( Mone_prev[0] !== Mone_expected_prev[0] )
		&& ((Mone_expected_prev[0] !== last_Mone_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mone[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mone_expected_prev);
		$display ("     Real value = %b", Mone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Mone_exp[0] = Mone_expected_prev[0];
	end
	if (
		( Mone_expected_prev[1] !== 1'bx ) && ( Mone_prev[1] !== Mone_expected_prev[1] )
		&& ((Mone_expected_prev[1] !== last_Mone_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mone[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mone_expected_prev);
		$display ("     Real value = %b", Mone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Mone_exp[1] = Mone_expected_prev[1];
	end
	if (
		( Mone_expected_prev[2] !== 1'bx ) && ( Mone_prev[2] !== Mone_expected_prev[2] )
		&& ((Mone_expected_prev[2] !== last_Mone_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mone[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mone_expected_prev);
		$display ("     Real value = %b", Mone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Mone_exp[2] = Mone_expected_prev[2];
	end
	if (
		( Mone_expected_prev[3] !== 1'bx ) && ( Mone_prev[3] !== Mone_expected_prev[3] )
		&& ((Mone_expected_prev[3] !== last_Mone_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mone[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mone_expected_prev);
		$display ("     Real value = %b", Mone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Mone_exp[3] = Mone_expected_prev[3];
	end
	if (
		( Mone_expected_prev[4] !== 1'bx ) && ( Mone_prev[4] !== Mone_expected_prev[4] )
		&& ((Mone_expected_prev[4] !== last_Mone_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mone[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mone_expected_prev);
		$display ("     Real value = %b", Mone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Mone_exp[4] = Mone_expected_prev[4];
	end
	if (
		( Mone_expected_prev[5] !== 1'bx ) && ( Mone_prev[5] !== Mone_expected_prev[5] )
		&& ((Mone_expected_prev[5] !== last_Mone_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mone[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mone_expected_prev);
		$display ("     Real value = %b", Mone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Mone_exp[5] = Mone_expected_prev[5];
	end
	if (
		( Mone_expected_prev[6] !== 1'bx ) && ( Mone_prev[6] !== Mone_expected_prev[6] )
		&& ((Mone_expected_prev[6] !== last_Mone_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mone[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mone_expected_prev);
		$display ("     Real value = %b", Mone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Mone_exp[6] = Mone_expected_prev[6];
	end
	if (
		( Mtwo_expected_prev[0] !== 1'bx ) && ( Mtwo_prev[0] !== Mtwo_expected_prev[0] )
		&& ((Mtwo_expected_prev[0] !== last_Mtwo_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mtwo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mtwo_expected_prev);
		$display ("     Real value = %b", Mtwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mtwo_exp[0] = Mtwo_expected_prev[0];
	end
	if (
		( Mtwo_expected_prev[1] !== 1'bx ) && ( Mtwo_prev[1] !== Mtwo_expected_prev[1] )
		&& ((Mtwo_expected_prev[1] !== last_Mtwo_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mtwo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mtwo_expected_prev);
		$display ("     Real value = %b", Mtwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mtwo_exp[1] = Mtwo_expected_prev[1];
	end
	if (
		( Mtwo_expected_prev[2] !== 1'bx ) && ( Mtwo_prev[2] !== Mtwo_expected_prev[2] )
		&& ((Mtwo_expected_prev[2] !== last_Mtwo_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mtwo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mtwo_expected_prev);
		$display ("     Real value = %b", Mtwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mtwo_exp[2] = Mtwo_expected_prev[2];
	end
	if (
		( Mtwo_expected_prev[3] !== 1'bx ) && ( Mtwo_prev[3] !== Mtwo_expected_prev[3] )
		&& ((Mtwo_expected_prev[3] !== last_Mtwo_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mtwo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mtwo_expected_prev);
		$display ("     Real value = %b", Mtwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mtwo_exp[3] = Mtwo_expected_prev[3];
	end
	if (
		( Mtwo_expected_prev[4] !== 1'bx ) && ( Mtwo_prev[4] !== Mtwo_expected_prev[4] )
		&& ((Mtwo_expected_prev[4] !== last_Mtwo_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mtwo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mtwo_expected_prev);
		$display ("     Real value = %b", Mtwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mtwo_exp[4] = Mtwo_expected_prev[4];
	end
	if (
		( Mtwo_expected_prev[5] !== 1'bx ) && ( Mtwo_prev[5] !== Mtwo_expected_prev[5] )
		&& ((Mtwo_expected_prev[5] !== last_Mtwo_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mtwo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mtwo_expected_prev);
		$display ("     Real value = %b", Mtwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mtwo_exp[5] = Mtwo_expected_prev[5];
	end
	if (
		( Mtwo_expected_prev[6] !== 1'bx ) && ( Mtwo_prev[6] !== Mtwo_expected_prev[6] )
		&& ((Mtwo_expected_prev[6] !== last_Mtwo_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mtwo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mtwo_expected_prev);
		$display ("     Real value = %b", Mtwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mtwo_exp[6] = Mtwo_expected_prev[6];
	end
	if (
		( Sone_expected_prev[0] !== 1'bx ) && ( Sone_prev[0] !== Sone_expected_prev[0] )
		&& ((Sone_expected_prev[0] !== last_Sone_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sone[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sone_expected_prev);
		$display ("     Real value = %b", Sone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sone_exp[0] = Sone_expected_prev[0];
	end
	if (
		( Sone_expected_prev[1] !== 1'bx ) && ( Sone_prev[1] !== Sone_expected_prev[1] )
		&& ((Sone_expected_prev[1] !== last_Sone_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sone[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sone_expected_prev);
		$display ("     Real value = %b", Sone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sone_exp[1] = Sone_expected_prev[1];
	end
	if (
		( Sone_expected_prev[2] !== 1'bx ) && ( Sone_prev[2] !== Sone_expected_prev[2] )
		&& ((Sone_expected_prev[2] !== last_Sone_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sone[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sone_expected_prev);
		$display ("     Real value = %b", Sone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sone_exp[2] = Sone_expected_prev[2];
	end
	if (
		( Sone_expected_prev[3] !== 1'bx ) && ( Sone_prev[3] !== Sone_expected_prev[3] )
		&& ((Sone_expected_prev[3] !== last_Sone_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sone[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sone_expected_prev);
		$display ("     Real value = %b", Sone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sone_exp[3] = Sone_expected_prev[3];
	end
	if (
		( Sone_expected_prev[4] !== 1'bx ) && ( Sone_prev[4] !== Sone_expected_prev[4] )
		&& ((Sone_expected_prev[4] !== last_Sone_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sone[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sone_expected_prev);
		$display ("     Real value = %b", Sone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sone_exp[4] = Sone_expected_prev[4];
	end
	if (
		( Sone_expected_prev[5] !== 1'bx ) && ( Sone_prev[5] !== Sone_expected_prev[5] )
		&& ((Sone_expected_prev[5] !== last_Sone_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sone[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sone_expected_prev);
		$display ("     Real value = %b", Sone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sone_exp[5] = Sone_expected_prev[5];
	end
	if (
		( Sone_expected_prev[6] !== 1'bx ) && ( Sone_prev[6] !== Sone_expected_prev[6] )
		&& ((Sone_expected_prev[6] !== last_Sone_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sone[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sone_expected_prev);
		$display ("     Real value = %b", Sone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sone_exp[6] = Sone_expected_prev[6];
	end
	if (
		( Stwo_expected_prev[0] !== 1'bx ) && ( Stwo_prev[0] !== Stwo_expected_prev[0] )
		&& ((Stwo_expected_prev[0] !== last_Stwo_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stwo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stwo_expected_prev);
		$display ("     Real value = %b", Stwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Stwo_exp[0] = Stwo_expected_prev[0];
	end
	if (
		( Stwo_expected_prev[1] !== 1'bx ) && ( Stwo_prev[1] !== Stwo_expected_prev[1] )
		&& ((Stwo_expected_prev[1] !== last_Stwo_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stwo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stwo_expected_prev);
		$display ("     Real value = %b", Stwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Stwo_exp[1] = Stwo_expected_prev[1];
	end
	if (
		( Stwo_expected_prev[2] !== 1'bx ) && ( Stwo_prev[2] !== Stwo_expected_prev[2] )
		&& ((Stwo_expected_prev[2] !== last_Stwo_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stwo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stwo_expected_prev);
		$display ("     Real value = %b", Stwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Stwo_exp[2] = Stwo_expected_prev[2];
	end
	if (
		( Stwo_expected_prev[3] !== 1'bx ) && ( Stwo_prev[3] !== Stwo_expected_prev[3] )
		&& ((Stwo_expected_prev[3] !== last_Stwo_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stwo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stwo_expected_prev);
		$display ("     Real value = %b", Stwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Stwo_exp[3] = Stwo_expected_prev[3];
	end
	if (
		( Stwo_expected_prev[4] !== 1'bx ) && ( Stwo_prev[4] !== Stwo_expected_prev[4] )
		&& ((Stwo_expected_prev[4] !== last_Stwo_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stwo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stwo_expected_prev);
		$display ("     Real value = %b", Stwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Stwo_exp[4] = Stwo_expected_prev[4];
	end
	if (
		( Stwo_expected_prev[5] !== 1'bx ) && ( Stwo_prev[5] !== Stwo_expected_prev[5] )
		&& ((Stwo_expected_prev[5] !== last_Stwo_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stwo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stwo_expected_prev);
		$display ("     Real value = %b", Stwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Stwo_exp[5] = Stwo_expected_prev[5];
	end
	if (
		( Stwo_expected_prev[6] !== 1'bx ) && ( Stwo_prev[6] !== Stwo_expected_prev[6] )
		&& ((Stwo_expected_prev[6] !== last_Stwo_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stwo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stwo_expected_prev);
		$display ("     Real value = %b", Stwo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Stwo_exp[6] = Stwo_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module trabalho_final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg Reset;
reg Start_Stop;
// wires                                               
wire [6:0] Mone;
wire [6:0] Mtwo;
wire [6:0] Sone;
wire [6:0] Stwo;

wire sampler;                             

// assign statements (if any)                          
trabalho_final i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Mone(Mone),
	.Mtwo(Mtwo),
	.Reset(Reset),
	.Sone(Sone),
	.Start_Stop(Start_Stop),
	.Stwo(Stwo)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500000 1'b1;
	#500000;
end 

// Start_Stop
initial
begin
	Start_Stop = 1'b0;
	Start_Stop = #6000000 1'b1;
	Start_Stop = #3000000 1'b0;
	Start_Stop = #77000000 1'b1;
	Start_Stop = #8000000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #74000000 1'b1;
	Reset = #5000000 1'b0;
	Reset = #12000000 1'b1;
	Reset = #3000000 1'b0;
end 

trabalho_final_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Reset(Reset),
	.Start_Stop(Start_Stop),
	.sampler_tx(sampler)
);

trabalho_final_vlg_check_tst tb_out(
	.Mone(Mone),
	.Mtwo(Mtwo),
	.Sone(Sone),
	.Stwo(Stwo),
	.sampler_rx(sampler)
);
endmodule

