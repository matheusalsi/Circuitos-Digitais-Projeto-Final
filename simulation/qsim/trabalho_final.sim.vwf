/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 100000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 0.0;
	GRID_DUTY_CYCLE = 50;
}




SIGNAL("CLK")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Mone")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Mone[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mone";
}

SIGNAL("Mone[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mone";
}

SIGNAL("Mone[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mone";
}

SIGNAL("Mone[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mone";
}

SIGNAL("Mone[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mone";
}

SIGNAL("Mone[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mone";
}

SIGNAL("Mone[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mone";
}

SIGNAL("Mtwo")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Mtwo[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mtwo";
}

SIGNAL("Mtwo[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mtwo";
}

SIGNAL("Mtwo[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mtwo";
}

SIGNAL("Mtwo[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mtwo";
}

SIGNAL("Mtwo[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mtwo";
}

SIGNAL("Mtwo[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mtwo";
}

SIGNAL("Mtwo[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Mtwo";
}

SIGNAL("Reset")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Sone")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Sone[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Sone";
}

SIGNAL("Sone[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Sone";
}

SIGNAL("Sone[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Sone";
}

SIGNAL("Sone[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Sone";
}

SIGNAL("Sone[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Sone";
}

SIGNAL("Sone[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Sone";
}

SIGNAL("Sone[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Sone";
}

SIGNAL("Start_Stop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Stwo")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Stwo[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Stwo";
}

SIGNAL("Stwo[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Stwo";
}

SIGNAL("Stwo[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Stwo";
}

SIGNAL("Stwo[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Stwo";
}

SIGNAL("Stwo[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Stwo";
}

SIGNAL("Stwo[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Stwo";
}

SIGNAL("Stwo[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Stwo";
}

TRANSITION_LIST("CLK")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
		LEVEL 0 FOR 500.0;
		LEVEL 1 FOR 500.0;
	}
}
TRANSITION_LIST("Mone[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.796;
		LEVEL 1 FOR 66501.762;
		LEVEL 0 FOR 8001.655;
		LEVEL 1 FOR 25491.787;
	}
}
TRANSITION_LIST("Mone[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.429;
		LEVEL 1 FOR 99995.571;
	}
}
TRANSITION_LIST("Mone[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.582;
		LEVEL 1 FOR 99995.418;
	}
}
TRANSITION_LIST("Mone[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.424;
		LEVEL 1 FOR 66501.778;
		LEVEL 0 FOR 8001.641;
		LEVEL 1 FOR 25492.157;
	}
}
TRANSITION_LIST("Mone[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.953;
		LEVEL 1 FOR 66501.698;
		LEVEL 0 FOR 8001.706;
		LEVEL 1 FOR 25491.643;
	}
}
TRANSITION_LIST("Mone[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.573;
		LEVEL 1 FOR 66501.556;
		LEVEL 0 FOR 8001.76;
		LEVEL 1 FOR 25492.111;
	}
}
TRANSITION_LIST("Mone[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.823;
		LEVEL 0 FOR 99995.177;
	}
}
TRANSITION_LIST("Mtwo[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.991;
		LEVEL 1 FOR 99995.009;
	}
}
TRANSITION_LIST("Mtwo[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 3.779;
		LEVEL 1 FOR 99996.221;
	}
}
TRANSITION_LIST("Mtwo[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.303;
		LEVEL 1 FOR 99995.697;
	}
}
TRANSITION_LIST("Mtwo[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.576;
		LEVEL 1 FOR 99995.424;
	}
}
TRANSITION_LIST("Mtwo[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.65;
		LEVEL 1 FOR 99995.35;
	}
}
TRANSITION_LIST("Mtwo[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.107;
		LEVEL 1 FOR 99994.893;
	}
}
TRANSITION_LIST("Mtwo[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 3.429;
		LEVEL 0 FOR 99996.571;
	}
}
TRANSITION_LIST("Reset")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 74000.0;
		LEVEL 1 FOR 5000.0;
		LEVEL 0 FOR 12000.0;
		LEVEL 1 FOR 3000.0;
		LEVEL 0 FOR 6000.0;
	}
}
TRANSITION_LIST("Sone[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.901;
		LEVEL 1 FOR 7501.44;
		LEVEL 0 FOR 1000.022;
		LEVEL 1 FOR 2001.073;
		LEVEL 0 FOR 998.863;
		LEVEL 1 FOR 6000.042;
		LEVEL 0 FOR 1000.022;
		LEVEL 1 FOR 2000.461;
		LEVEL 0 FOR 999.475;
		LEVEL 1 FOR 6000.042;
		LEVEL 0 FOR 1000.022;
		LEVEL 1 FOR 2001.205;
		LEVEL 0 FOR 998.731;
		LEVEL 1 FOR 6000.042;
		LEVEL 0 FOR 1000.022;
		LEVEL 1 FOR 2000.461;
		LEVEL 0 FOR 999.475;
		LEVEL 1 FOR 6000.042;
		LEVEL 0 FOR 1000.022;
		LEVEL 1 FOR 2001.073;
		LEVEL 0 FOR 998.863;
		LEVEL 1 FOR 6000.042;
		LEVEL 0 FOR 1000.022;
		LEVEL 1 FOR 2000.461;
		LEVEL 0 FOR 999.475;
		LEVEL 1 FOR 6000.042;
		LEVEL 0 FOR 1000.022;
		LEVEL 1 FOR 2001.073;
		LEVEL 0 FOR 998.863;
		LEVEL 1 FOR 9000.042;
		LEVEL 0 FOR 1000.022;
		LEVEL 1 FOR 2001.073;
		LEVEL 0 FOR 998.863;
		LEVEL 1 FOR 15493.701;
	}
}
TRANSITION_LIST("Sone[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.944;
		LEVEL 1 FOR 11501.33;
		LEVEL 0 FOR 2000.041;
		LEVEL 1 FOR 7999.959;
		LEVEL 0 FOR 2000.041;
		LEVEL 1 FOR 7999.959;
		LEVEL 0 FOR 2000.041;
		LEVEL 1 FOR 7999.959;
		LEVEL 0 FOR 2000.041;
		LEVEL 1 FOR 7999.959;
		LEVEL 0 FOR 2000.041;
		LEVEL 1 FOR 7999.959;
		LEVEL 0 FOR 2000.041;
		LEVEL 1 FOR 7999.959;
		LEVEL 0 FOR 2000.041;
		LEVEL 1 FOR 10999.959;
		LEVEL 0 FOR 2000.041;
		LEVEL 1 FOR 13493.685;
	}
}
TRANSITION_LIST("Sone[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.156;
		LEVEL 1 FOR 8501.798;
		LEVEL 0 FOR 999.559;
		LEVEL 1 FOR 9000.99;
		LEVEL 0 FOR 999.01;
		LEVEL 1 FOR 9000.441;
		LEVEL 0 FOR 999.559;
		LEVEL 1 FOR 9001.256;
		LEVEL 0 FOR 998.744;
		LEVEL 1 FOR 9000.441;
		LEVEL 0 FOR 999.559;
		LEVEL 1 FOR 9000.99;
		LEVEL 0 FOR 999.01;
		LEVEL 1 FOR 9000.441;
		LEVEL 0 FOR 999.559;
		LEVEL 1 FOR 12000.441;
		LEVEL 0 FOR 999.559;
		LEVEL 1 FOR 17493.487;
	}
}
TRANSITION_LIST("Sone[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.137;
		LEVEL 1 FOR 7501.4;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2001.038;
		LEVEL 0 FOR 998.896;
		LEVEL 1 FOR 2000.005;
		LEVEL 0 FOR 1001.415;
		LEVEL 1 FOR 2998.585;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2000.426;
		LEVEL 0 FOR 999.508;
		LEVEL 1 FOR 2000.005;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2999.939;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2001.17;
		LEVEL 0 FOR 998.764;
		LEVEL 1 FOR 2000.005;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2999.939;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2000.426;
		LEVEL 0 FOR 999.508;
		LEVEL 1 FOR 2000.005;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2999.939;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2001.038;
		LEVEL 0 FOR 998.896;
		LEVEL 1 FOR 2000.005;
		LEVEL 0 FOR 1001.147;
		LEVEL 1 FOR 2998.853;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2000.426;
		LEVEL 0 FOR 999.508;
		LEVEL 1 FOR 2000.005;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2999.939;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2001.038;
		LEVEL 0 FOR 998.896;
		LEVEL 1 FOR 2000.005;
		LEVEL 0 FOR 1001.415;
		LEVEL 1 FOR 5998.585;
		LEVEL 0 FOR 1000.061;
		LEVEL 1 FOR 2001.038;
		LEVEL 0 FOR 998.896;
		LEVEL 1 FOR 2000.005;
		LEVEL 0 FOR 13493.463;
	}
}
TRANSITION_LIST("Sone[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.227;
		LEVEL 1 FOR 7501.329;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 3000.534;
		LEVEL 1 FOR 999.466;
		LEVEL 0 FOR 1001.244;
		LEVEL 1 FOR 998.756;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 3001.817;
		LEVEL 1 FOR 998.183;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 3000.534;
		LEVEL 1 FOR 999.466;
		LEVEL 0 FOR 1000.819;
		LEVEL 1 FOR 999.181;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 3000.58;
		LEVEL 1 FOR 999.42;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 3000.534;
		LEVEL 1 FOR 999.466;
		LEVEL 0 FOR 1001.218;
		LEVEL 1 FOR 998.782;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 3000.617;
		LEVEL 1 FOR 999.383;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 3000.534;
		LEVEL 1 FOR 999.466;
		LEVEL 0 FOR 1001.244;
		LEVEL 1 FOR 5998.756;
		LEVEL 0 FOR 1000.109;
		LEVEL 1 FOR 999.891;
		LEVEL 0 FOR 3000.534;
		LEVEL 1 FOR 999.466;
		LEVEL 0 FOR 13493.444;
	}
}
TRANSITION_LIST("Sone[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.934;
		LEVEL 1 FOR 7501.36;
		LEVEL 0 FOR 3000.633;
		LEVEL 1 FOR 2999.367;
		LEVEL 0 FOR 1000.113;
		LEVEL 1 FOR 2999.887;
		LEVEL 0 FOR 3000.55;
		LEVEL 1 FOR 2999.45;
		LEVEL 0 FOR 1000.113;
		LEVEL 1 FOR 2999.887;
		LEVEL 0 FOR 3000.633;
		LEVEL 1 FOR 2999.367;
		LEVEL 0 FOR 1000.113;
		LEVEL 1 FOR 2999.887;
		LEVEL 0 FOR 3000.55;
		LEVEL 1 FOR 2999.45;
		LEVEL 0 FOR 1000.113;
		LEVEL 1 FOR 2999.887;
		LEVEL 0 FOR 3000.633;
		LEVEL 1 FOR 2999.367;
		LEVEL 0 FOR 1000.113;
		LEVEL 1 FOR 2999.887;
		LEVEL 0 FOR 3000.55;
		LEVEL 1 FOR 2999.45;
		LEVEL 0 FOR 1000.113;
		LEVEL 1 FOR 2999.887;
		LEVEL 0 FOR 3000.633;
		LEVEL 1 FOR 2999.367;
		LEVEL 0 FOR 1000.113;
		LEVEL 1 FOR 5999.887;
		LEVEL 0 FOR 3000.633;
		LEVEL 1 FOR 2999.367;
		LEVEL 0 FOR 13493.706;
	}
}
TRANSITION_LIST("Sone[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.314;
		LEVEL 0 FOR 8501.582;
		LEVEL 1 FOR 4999.484;
		LEVEL 0 FOR 1000.084;
		LEVEL 1 FOR 2000.596;
		LEVEL 0 FOR 2000.385;
		LEVEL 1 FOR 4998.935;
		LEVEL 0 FOR 1000.084;
		LEVEL 1 FOR 2001.155;
		LEVEL 0 FOR 1999.277;
		LEVEL 1 FOR 4999.484;
		LEVEL 0 FOR 1001.341;
		LEVEL 1 FOR 1999.339;
		LEVEL 0 FOR 2000.651;
		LEVEL 1 FOR 4998.669;
		LEVEL 0 FOR 1000.084;
		LEVEL 1 FOR 2001.238;
		LEVEL 0 FOR 1999.194;
		LEVEL 1 FOR 4999.484;
		LEVEL 0 FOR 1000.084;
		LEVEL 1 FOR 2000.596;
		LEVEL 0 FOR 2000.385;
		LEVEL 1 FOR 4998.935;
		LEVEL 0 FOR 1000.084;
		LEVEL 1 FOR 2001.155;
		LEVEL 0 FOR 1999.277;
		LEVEL 1 FOR 4999.484;
		LEVEL 0 FOR 1000.084;
		LEVEL 1 FOR 3.094;
		LEVEL 0 FOR 6997.338;
		LEVEL 1 FOR 4999.484;
		LEVEL 0 FOR 13493.62;
	}
}
TRANSITION_LIST("Start_Stop")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 6000.0;
		LEVEL 1 FOR 3000.0;
		LEVEL 0 FOR 77000.0;
		LEVEL 1 FOR 8000.0;
		LEVEL 0 FOR 6000.0;
	}
}
TRANSITION_LIST("Stwo[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.883;
		LEVEL 1 FOR 16501.768;
		LEVEL 0 FOR 10000.016;
		LEVEL 1 FOR 20000.947;
		LEVEL 0 FOR 9999.102;
		LEVEL 1 FOR 43493.284;
	}
}
TRANSITION_LIST("Stwo[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 3.435;
		LEVEL 1 FOR 56502.227;
		LEVEL 0 FOR 10001.883;
		LEVEL 1 FOR 33492.455;
	}
}
TRANSITION_LIST("Stwo[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 3.687;
		LEVEL 1 FOR 26502.768;
		LEVEL 0 FOR 9999.772;
		LEVEL 1 FOR 63493.773;
	}
}
TRANSITION_LIST("Stwo[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.821;
		LEVEL 1 FOR 16501.903;
		LEVEL 0 FOR 9999.876;
		LEVEL 1 FOR 20001.089;
		LEVEL 0 FOR 9998.963;
		LEVEL 1 FOR 43493.348;
	}
}
TRANSITION_LIST("Stwo[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 6.174;
		LEVEL 1 FOR 16501.888;
		LEVEL 0 FOR 10000.825;
		LEVEL 1 FOR 9999.175;
		LEVEL 0 FOR 30001.789;
		LEVEL 1 FOR 33490.149;
	}
}
TRANSITION_LIST("Stwo[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.891;
		LEVEL 1 FOR 16501.768;
		LEVEL 0 FOR 30000.476;
		LEVEL 1 FOR 53492.865;
	}
}
TRANSITION_LIST("Stwo[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 3.176;
		LEVEL 0 FOR 26502.821;
		LEVEL 1 FOR 40001.289;
		LEVEL 0 FOR 33492.714;
	}
}


DISPLAY_LINE
{
	CHANNEL = "CLK";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Start_Stop";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Reset";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Mone";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5, 6, 7, 8, 9, 10;
}

DISPLAY_LINE
{
	CHANNEL = "Mone[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Mone[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Mone[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Mone[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Mone[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Mone[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Mone[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Mtwo";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
	CHILDREN = 12, 13, 14, 15, 16, 17, 18;
}

DISPLAY_LINE
{
	CHANNEL = "Mtwo[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Mtwo[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Mtwo[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Mtwo[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Mtwo[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Mtwo[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Mtwo[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Sone";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
	CHILDREN = 20, 21, 22, 23, 24, 25, 26;
}

DISPLAY_LINE
{
	CHANNEL = "Sone[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "Sone[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "Sone[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "Sone[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "Sone[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "Sone[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "Sone[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "Stwo";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 0;
	CHILDREN = 28, 29, 30, 31, 32, 33, 34;
}

DISPLAY_LINE
{
	CHANNEL = "Stwo[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Stwo[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Stwo[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Stwo[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Stwo[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Stwo[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "Stwo[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 27;
}
TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
